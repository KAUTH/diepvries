CREATE OR REPLACE TABLE dv_stg.orders_20190806_000000 (h_customer_hashkey text NOT NULL, r_timestamp timestamp_ntz NOT NULL, r_source text NOT NULL, customer_id text NOT NULL, h_order_hashkey text NOT NULL, order_id text NOT NULL, l_order_customer_hashkey text NOT NULL, ck_test_string text NOT NULL, ck_test_timestamp timestamp_ntz NOT NULL, hs_customer_hashdiff text NOT NULL, test_string text , test_date date , test_timestamp timestamp_ntz , test_integer number , test_decimal number , ls_order_customer_eff_hashdiff text NOT NULL, dummy_descriptive_field text NOT NULL) AS SELECT MD5(COALESCE(customer_id, 'dv_unknown')) AS h_customer_hashkey, CAST('2019-08-06T00:00:00.000000Z' AS TIMESTAMP) AS r_timestamp, 'test' AS r_source, COALESCE(customer_id, 'dv_unknown') AS customer_id, MD5(COALESCE(order_id, 'dv_unknown')) AS h_order_hashkey, COALESCE(order_id, 'dv_unknown') AS order_id, MD5(COALESCE(order_id, 'dv_unknown')||'|~~|'||COALESCE(customer_id, 'dv_unknown')||'|~~|'||COALESCE(CAST(ck_test_string AS VARCHAR), '')||'|~~|'||COALESCE(CAST(ck_test_timestamp AS VARCHAR), '')) AS l_order_customer_hashkey, ck_test_string, ck_test_timestamp, MD5(REGEXP_REPLACE(COALESCE(customer_id, 'dv_unknown')||'|~~|'||COALESCE(CAST(test_string AS VARCHAR), '')||'|~~|'||COALESCE(CAST(test_date AS VARCHAR), '')||'|~~|'||COALESCE(CAST(test_timestamp AS VARCHAR), '')||'|~~|'||COALESCE(CAST(test_integer AS VARCHAR), '')||'|~~|'||COALESCE(CAST(test_decimal AS VARCHAR), ''), '(\\|~~\\|){1,}$', '')) AS hs_customer_hashdiff, test_string, test_date, test_timestamp, test_integer, test_decimal, MD5(REGEXP_REPLACE(COALESCE(order_id, 'dv_unknown')||'|~~|'||COALESCE(customer_id, 'dv_unknown')||'|~~|'||COALESCE(CAST(ck_test_string AS VARCHAR), '')||'|~~|'||COALESCE(CAST(ck_test_timestamp AS VARCHAR), '')||'|~~|'||COALESCE(CAST(dummy_descriptive_field AS VARCHAR), ''), '(\\|~~\\|){1,}$', '')) AS ls_order_customer_eff_hashdiff, dummy_descriptive_field FROM dv_extract.extract_orders;
INSERT INTO dv.h_customer (h_customer_hashkey,r_timestamp,r_source,customer_id) SELECT DISTINCT h_customer_hashkey,r_timestamp,r_source,customer_id FROM dv_stg.orders_20190806_000000 AS staging WHERE NOT EXISTS(SELECT 1 FROM dv.h_customer AS hub WHERE hub.customer_id = staging.customer_id);
INSERT INTO dv.h_order (h_order_hashkey,r_timestamp,r_source,order_id) SELECT DISTINCT h_order_hashkey,r_timestamp,r_source,order_id FROM dv_stg.orders_20190806_000000 AS staging WHERE NOT EXISTS(SELECT 1 FROM dv.h_order AS hub WHERE hub.order_id = staging.order_id);
INSERT INTO dv.l_order_customer (l_order_customer_hashkey,h_order_hashkey,h_customer_hashkey,order_id,customer_id,ck_test_string,ck_test_timestamp,r_timestamp,r_source) SELECT DISTINCT l_order_customer_hashkey,h_order_hashkey,h_customer_hashkey,order_id,customer_id,ck_test_string,ck_test_timestamp,r_timestamp,r_source FROM dv_stg.orders_20190806_000000 AS staging WHERE NOT EXISTS(SELECT 1 FROM dv.l_order_customer AS lnk WHERE lnk.l_order_customer_hashkey = staging.l_order_customer_hashkey);
MERGE INTO dv.hs_customer AS satellite USING (WITH deduplicated_staging AS ( SELECT ranked_staging.* FROM ( SELECT staging.h_customer_hashkey, staging.hs_customer_hashdiff, staging.r_timestamp, ROW_NUMBER() OVER ( PARTITION BY staging.h_customer_hashkey ORDER BY staging.hs_customer_hashdiff ) AS rank, staging.r_source ,staging.test_string,staging.test_date,staging.test_timestamp,staging.test_integer,staging.test_decimal FROM dv_stg.orders_20190806_000000 AS staging ) AS ranked_staging CROSS JOIN ( SELECT MAX(r_timestamp) AS max_r_timestamp FROM dv.hs_customer ) AS max_satellite_timestamp WHERE ranked_staging.rank = 1 AND ranked_staging.r_timestamp >= COALESCE(max_satellite_timestamp.max_r_timestamp, '1970-01-01 00:00:00')), staging_satellite_affected_records AS ( SELECT staging.h_customer_hashkey, staging.hs_customer_hashdiff, staging.r_timestamp, staging.r_source ,staging.test_string,staging.test_date,staging.test_timestamp,staging.test_integer,staging.test_decimal FROM deduplicated_staging AS staging LEFT OUTER JOIN dv.hs_customer AS satellite ON ( staging.h_customer_hashkey = satellite.h_customer_hashkey AND satellite.r_timestamp_end = CAST('9999-12-31T00:00:00.000000Z' AS TIMESTAMP) ) WHERE satellite.h_customer_hashkey IS NULL OR satellite.s_hashdiff <> staging.hs_customer_hashdiff UNION ALL SELECT satellite.h_customer_hashkey, satellite.s_hashdiff, satellite.r_timestamp, satellite.r_source ,satellite.test_string,satellite.test_date,satellite.test_timestamp,satellite.test_integer,satellite.test_decimal FROM dv.hs_customer AS satellite INNER JOIN deduplicated_staging AS staging ON ( staging.h_customer_hashkey = satellite.h_customer_hashkey AND satellite.r_timestamp_end = CAST('9999-12-31T00:00:00.000000Z' AS TIMESTAMP) ) WHERE staging.hs_customer_hashdiff <> satellite.s_hashdiff ) SELECT h_customer_hashkey, hs_customer_hashdiff, r_timestamp AS r_timestamp, LEAD(DATEADD(milliseconds, - 1, r_timestamp), 1, CAST('9999-12-31T00:00:00.000000Z' AS TIMESTAMP)) OVER (PARTITION BY h_customer_hashkey ORDER BY r_timestamp) AS r_timestamp_end, r_source ,test_string,test_date,test_timestamp,test_integer,test_decimal FROM staging_satellite_affected_records ) AS staging ON ( satellite.h_customer_hashkey = staging.h_customer_hashkey AND satellite.r_timestamp = staging.r_timestamp ) WHEN MATCHED THEN UPDATE SET satellite.r_timestamp_end = staging.r_timestamp_end WHEN NOT MATCHED THEN INSERT (h_customer_hashkey,s_hashdiff,r_timestamp,r_timestamp_end,r_source,test_string,test_date,test_timestamp,test_integer,test_decimal) VALUES ( staging.h_customer_hashkey, staging.hs_customer_hashdiff, staging.r_timestamp, staging.r_timestamp_end, staging.r_source ,staging.test_string,staging.test_date,staging.test_timestamp,staging.test_integer,staging.test_decimal );
MERGE INTO dv.ls_order_customer_eff AS satellite USING ( WITH deduplicated_staging AS ( SELECT ranked_staging.* FROM ( SELECT staging.l_order_customer_hashkey, staging.ls_order_customer_eff_hashdiff, staging.r_timestamp, ROW_NUMBER() OVER ( PARTITION BY staging.h_customer_hashkey ORDER BY staging.ls_order_customer_eff_hashdiff ) AS rank, staging.r_source, staging.h_customer_hashkey ,staging.dummy_descriptive_field FROM dv_stg.orders_20190806_000000 AS staging ) AS ranked_staging CROSS JOIN ( SELECT MAX(r_timestamp) AS max_r_timestamp FROM dv.ls_order_customer_eff ) AS max_satellite_timestamp WHERE ranked_staging.rank = 1 AND ranked_staging.r_timestamp >= COALESCE(max_satellite_timestamp.max_r_timestamp, '1970-01-01 00:00:00') ), effectivity_satellite AS ( SELECT l.h_customer_hashkey, satellite.* FROM dv.l_order_customer AS l INNER JOIN dv.ls_order_customer_eff AS satellite ON ( l.l_order_customer_hashkey = satellite.l_order_customer_hashkey AND satellite.r_timestamp_end = CAST('9999-12-31T00:00:00.000000Z' AS TIMESTAMP) ) INNER JOIN deduplicated_staging AS staging ON (l.h_customer_hashkey = staging.h_customer_hashkey) ), staging_satellite_affected_records AS ( SELECT staging.h_customer_hashkey, staging.l_order_customer_hashkey, staging.ls_order_customer_eff_hashdiff, staging.r_timestamp, staging.r_source ,staging.dummy_descriptive_field FROM deduplicated_staging AS staging LEFT JOIN effectivity_satellite AS satellite ON (satellite.h_customer_hashkey = staging.h_customer_hashkey) WHERE satellite.l_order_customer_hashkey IS NULL OR satellite.s_hashdiff <> staging.ls_order_customer_eff_hashdiff UNION ALL SELECT satellite.h_customer_hashkey, satellite.l_order_customer_hashkey, satellite.s_hashdiff AS ls_order_customer_eff_hashdiff, satellite.r_timestamp, satellite.r_source ,satellite.dummy_descriptive_field FROM deduplicated_staging AS staging INNER JOIN effectivity_satellite AS satellite ON (satellite.h_customer_hashkey = staging.h_customer_hashkey) WHERE satellite.s_hashdiff <> staging.ls_order_customer_eff_hashdiff ) SELECT l_order_customer_hashkey, ls_order_customer_eff_hashdiff, r_timestamp AS r_timestamp, LEAD(DATEADD(milliseconds, - 1, r_timestamp), 1, CAST('9999-12-31T00:00:00.000000Z' AS TIMESTAMP)) OVER (PARTITION BY h_customer_hashkey ORDER BY r_timestamp) AS r_timestamp_end, r_source ,dummy_descriptive_field FROM staging_satellite_affected_records ) AS staging ON ( satellite.l_order_customer_hashkey = staging.l_order_customer_hashkey AND satellite.r_timestamp = staging.r_timestamp ) WHEN MATCHED THEN UPDATE SET satellite.r_timestamp_end = staging.r_timestamp_end WHEN NOT MATCHED THEN INSERT (l_order_customer_hashkey,s_hashdiff,r_timestamp,r_timestamp_end,r_source,dummy_descriptive_field) VALUES ( staging.l_order_customer_hashkey, staging.ls_order_customer_eff_hashdiff, staging.r_timestamp, staging.r_timestamp_end, staging.r_source ,staging.dummy_descriptive_field );
