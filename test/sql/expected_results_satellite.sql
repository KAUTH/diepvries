MERGE INTO dv.hs_customer AS satellite USING ( WITH filtered_staging AS ( SELECT * FROM ( SELECT staging.*, ROW_NUMBER() OVER (PARTITION BY h_customer_hashkey ORDER BY r_source, hs_customer_hashdiff) = 1 AS _rank FROM dv_stg.orders_20190806_000000 AS staging CROSS JOIN ( SELECT MAX(r_timestamp) AS max_r_timestamp FROM dv.hs_customer ) AS max_satellite_timestamp WHERE staging.r_timestamp >= COALESCE(max_satellite_timestamp.max_r_timestamp, '1970-01-01 00:00:00') ) WHERE _rank=1 ), staging_satellite_affected_records AS ( SELECT staging.h_customer_hashkey, staging.hs_customer_hashdiff, staging.r_timestamp, staging.r_source ,staging.test_string,staging.test_date,staging.test_timestamp,staging.test_integer,staging.test_decimal FROM filtered_staging AS staging LEFT OUTER JOIN dv.hs_customer AS satellite ON (staging.h_customer_hashkey = satellite.h_customer_hashkey AND satellite.r_timestamp_end = CAST('9999-12-31T00:00:00.000000Z' AS TIMESTAMP)) WHERE satellite.h_customer_hashkey IS NULL OR satellite.s_hashdiff <> staging.hs_customer_hashdiff UNION ALL SELECT satellite.h_customer_hashkey, satellite.s_hashdiff, satellite.r_timestamp, satellite.r_source ,satellite.test_string,satellite.test_date,satellite.test_timestamp,satellite.test_integer,satellite.test_decimal FROM dv.hs_customer AS satellite INNER JOIN filtered_staging AS staging ON (staging.h_customer_hashkey = satellite.h_customer_hashkey AND satellite.r_timestamp_end = CAST('9999-12-31T00:00:00.000000Z' AS TIMESTAMP)) WHERE staging.hs_customer_hashdiff <> satellite.s_hashdiff ) SELECT h_customer_hashkey, hs_customer_hashdiff, r_timestamp AS r_timestamp, LEAD(DATEADD(milliseconds, - 1, r_timestamp), 1, CAST('9999-12-31T00:00:00.000000Z' AS TIMESTAMP)) OVER (PARTITION BY h_customer_hashkey ORDER BY r_timestamp) AS r_timestamp_end, r_source ,test_string,test_date,test_timestamp,test_integer,test_decimal FROM staging_satellite_affected_records ) AS staging ON (satellite.h_customer_hashkey = staging.h_customer_hashkey AND satellite.r_timestamp = staging.r_timestamp) WHEN MATCHED THEN UPDATE SET satellite.r_timestamp_end = staging.r_timestamp_end WHEN NOT MATCHED THEN INSERT (h_customer_hashkey,s_hashdiff,r_timestamp,r_timestamp_end,r_source,test_string,test_date,test_timestamp,test_integer,test_decimal) VALUES ( staging.h_customer_hashkey, staging.hs_customer_hashdiff, staging.r_timestamp, staging.r_timestamp_end, staging.r_source ,staging.test_string,staging.test_date,staging.test_timestamp,staging.test_integer,staging.test_decimal);
